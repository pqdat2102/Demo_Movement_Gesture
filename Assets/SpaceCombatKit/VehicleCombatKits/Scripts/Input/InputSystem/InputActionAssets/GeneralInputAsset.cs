//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/SpaceCombatKit/VehicleCombatKits/Scripts/Input/InputSystem/InputActionAssets/GeneralInputAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace VSX.VehicleCombatKits
{
    public partial class @GeneralInputAsset: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GeneralInputAsset()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GeneralInputAsset"",
    ""maps"": [
        {
            ""name"": ""General Controls"",
            ""id"": ""bb585eb7-c211-4d88-bb77-1af054e5dd2c"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""3535a8b6-de8c-44d4-9d91-80e657ddd5f8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use"",
                    ""type"": ""Button"",
                    ""id"": ""f181701c-36e8-488e-b5c6-da065fb81075"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ac5f2434-33c3-4c39-86be-068e8eb5bc3b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61dacdf7-d630-432b-a5c3-8d5bd6fe327d"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29b3fc70-e61c-4eff-b0ef-01799ac29247"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e2a76ab-0b10-4f47-81cf-16f055076cdb"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Targeting Controls"",
            ""id"": ""7ddec75a-5f03-481a-8770-9c616f49810d"",
            ""actions"": [
                {
                    ""name"": ""Target Next"",
                    ""type"": ""Button"",
                    ""id"": ""f9880903-5205-4846-abe4-a136a6ae0de0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Target Previous"",
                    ""type"": ""Button"",
                    ""id"": ""37a3c2de-4051-4511-878d-2d37e633555b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Target Nearest"",
                    ""type"": ""Button"",
                    ""id"": ""684430e0-f190-4cb4-a76d-2e31fc978424"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Target Front"",
                    ""type"": ""Button"",
                    ""id"": ""0b114351-80b2-45c9-86b1-9f8fa516e23b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Target Under Cursor"",
                    ""type"": ""Button"",
                    ""id"": ""4e883ade-5345-413c-88b8-78542fc9ba3d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Auto Aim Toggle"",
                    ""type"": ""Button"",
                    ""id"": ""a92d0e2b-5383-42da-841c-18f2ade2a767"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3337a3d2-44e0-4a12-be15-43b8c591649c"",
                    ""path"": ""<Keyboard>/period"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""Target Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b84ea82f-e6ea-400f-9f74-29ad7ddb6a17"",
                    ""path"": ""<Keyboard>/comma"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""Target Previous"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c931802-3f47-47fb-a7e7-a5c4d00e631e"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""Target Nearest"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b0abe5b-fb56-493b-9f1e-58442ae09d32"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""Target Front"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8207828-4842-48ca-b6a0-935a7f62b979"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""Target Under Cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8bbe8c3e-e353-4f14-9c86-9ef69401ec70"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""Auto Aim Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""541ad9ab-ccc4-47ad-9ee7-885ebab962be"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Auto Aim Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera Controls"",
            ""id"": ""6dcf97a5-c9f1-4b33-af21-d6b77b5d0d6e"",
            ""actions"": [
                {
                    ""name"": ""Next Camera View"",
                    ""type"": ""Button"",
                    ""id"": ""bd01cca4-0e84-4f44-bdc6-ae5eb8131966"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Previous Camera View"",
                    ""type"": ""Button"",
                    ""id"": ""8f98e45a-b3fd-4fb7-8314-5aedbed2b04e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6a5afcd5-ded8-4465-8e8e-93b5639c06fd"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4f039296-9aa9-40a8-8eda-0a28611dc3ab"",
                    ""path"": ""<Keyboard>/rightBracket"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""Next Camera View"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""edb21f15-e522-4eba-a780-96c7244720c3"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Next Camera View"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1522403-512c-4699-98f4-695bee30cd36"",
                    ""path"": ""<Keyboard>/leftBracket"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""Previous Camera View"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0c823d3-d22b-49f5-bea2-13fee5503080"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Weapon Controls"",
            ""id"": ""eb4a4066-a61c-46c3-8398-a80716916c7a"",
            ""actions"": [
                {
                    ""name"": ""Fire Primary"",
                    ""type"": ""Button"",
                    ""id"": ""91cde11e-4ede-4d96-8542-dba35a41c0b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire Secondary"",
                    ""type"": ""Button"",
                    ""id"": ""c3f05d08-72e0-479a-98eb-94eeab8ca1fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bbfd9e05-66a9-4070-a581-e5ef76fc62ac"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""Fire Primary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf93514e-2938-4a92-a728-4ade5e481554"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Fire Primary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df6da35b-d961-4f16-a40d-1126e6bd2926"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""Fire Primary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""34b02c37-7f66-4ae7-ad21-99856422b177"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""Fire Secondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f057a00f-ada5-4d39-a346-e260c2c23963"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Fire Secondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d1a568a-f1f3-45bb-986b-46a098537086"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""Fire Secondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Core Controls"",
            ""id"": ""daa5df23-dffa-4abe-a5d7-c5b536c56cde"",
            ""actions"": [
                {
                    ""name"": ""Mouse Position"",
                    ""type"": ""Value"",
                    ""id"": ""9f685d8d-5a22-448a-9cbe-fa2f04b8093a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move Cursor"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ff884115-cc4f-4fd7-beef-4ffdfa52a313"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""7a4d16dd-031e-4157-8bc7-b6c07d77a9f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7ea5bc1d-2f92-4541-8e9b-15f2a0683a94"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""Mouse Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""1e6dee7c-0432-4a11-a24a-8bae5603ad70"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Cursor"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""03e0d646-3569-4b00-8760-9a963218b8b1"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""Move Cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1e89e467-1f24-4448-b806-ae3d125d221a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""Move Cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""42ea7bd0-860c-446b-be74-fe03fe0526dc"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""Move Cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3c87071b-13fc-4fd1-920f-6a4fbd9538e9"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""Move Cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""321ecd95-e011-4c40-aad4-a944495f5d2e"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0.05,y=0.05)"",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""Move Cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86abd85b-3d31-4515-9427-24f602df2db9"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move Cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3a64750-b1ee-4a1e-bd47-fda2703d8c08"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ffb7499-eaf8-4fc9-8d80-cf7d06574eab"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Vehicle Controls"",
            ""id"": ""692ecc58-8f3d-44f8-9994-0488157d8513"",
            ""actions"": [
                {
                    ""name"": ""Free Look Mode"",
                    ""type"": ""Button"",
                    ""id"": ""8b526981-f2e7-4997-88b7-27a522de0ce3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Free Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""20462200-17c5-43dd-a10c-5ec97bc33b6f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b5c4de33-f2c7-443c-a275-ec11a1e29454"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""Free Look Mode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7fa687c8-781a-44b2-a549-00690469553b"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Free Look Mode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""4dce7910-14a7-44b6-9556-0ce49afe4575"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Free Look"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""56997edc-3a3f-4e28-9779-6051c82a85b1"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""Free Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""07585ee5-e734-4e2a-9385-49b67788903d"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""Free Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""670fa45f-3068-4247-8a53-7f611a591540"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""Free Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""06233fa1-7ce9-4117-9737-0e0a01c995f5"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""Free Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""074b5768-dbdc-4b9c-89d1-dd0874875024"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0.05,y=0.05)"",
                    ""groups"": ""MouseKeyboard"",
                    ""action"": ""Free Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""492d9a14-8691-4f5e-aed6-71250b130eb6"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Free Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MouseKeyboard"",
            ""bindingGroup"": ""MouseKeyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // General Controls
            m_GeneralControls = asset.FindActionMap("General Controls", throwIfNotFound: true);
            m_GeneralControls_Pause = m_GeneralControls.FindAction("Pause", throwIfNotFound: true);
            m_GeneralControls_Use = m_GeneralControls.FindAction("Use", throwIfNotFound: true);
            // Targeting Controls
            m_TargetingControls = asset.FindActionMap("Targeting Controls", throwIfNotFound: true);
            m_TargetingControls_TargetNext = m_TargetingControls.FindAction("Target Next", throwIfNotFound: true);
            m_TargetingControls_TargetPrevious = m_TargetingControls.FindAction("Target Previous", throwIfNotFound: true);
            m_TargetingControls_TargetNearest = m_TargetingControls.FindAction("Target Nearest", throwIfNotFound: true);
            m_TargetingControls_TargetFront = m_TargetingControls.FindAction("Target Front", throwIfNotFound: true);
            m_TargetingControls_TargetUnderCursor = m_TargetingControls.FindAction("Target Under Cursor", throwIfNotFound: true);
            m_TargetingControls_AutoAimToggle = m_TargetingControls.FindAction("Auto Aim Toggle", throwIfNotFound: true);
            // Camera Controls
            m_CameraControls = asset.FindActionMap("Camera Controls", throwIfNotFound: true);
            m_CameraControls_NextCameraView = m_CameraControls.FindAction("Next Camera View", throwIfNotFound: true);
            m_CameraControls_PreviousCameraView = m_CameraControls.FindAction("Previous Camera View", throwIfNotFound: true);
            m_CameraControls_Zoom = m_CameraControls.FindAction("Zoom", throwIfNotFound: true);
            // Weapon Controls
            m_WeaponControls = asset.FindActionMap("Weapon Controls", throwIfNotFound: true);
            m_WeaponControls_FirePrimary = m_WeaponControls.FindAction("Fire Primary", throwIfNotFound: true);
            m_WeaponControls_FireSecondary = m_WeaponControls.FindAction("Fire Secondary", throwIfNotFound: true);
            // Core Controls
            m_CoreControls = asset.FindActionMap("Core Controls", throwIfNotFound: true);
            m_CoreControls_MousePosition = m_CoreControls.FindAction("Mouse Position", throwIfNotFound: true);
            m_CoreControls_MoveCursor = m_CoreControls.FindAction("Move Cursor", throwIfNotFound: true);
            m_CoreControls_Back = m_CoreControls.FindAction("Back", throwIfNotFound: true);
            // Vehicle Controls
            m_VehicleControls = asset.FindActionMap("Vehicle Controls", throwIfNotFound: true);
            m_VehicleControls_FreeLookMode = m_VehicleControls.FindAction("Free Look Mode", throwIfNotFound: true);
            m_VehicleControls_FreeLook = m_VehicleControls.FindAction("Free Look", throwIfNotFound: true);
        }

        ~@GeneralInputAsset()
        {
            UnityEngine.Debug.Assert(!m_GeneralControls.enabled, "This will cause a leak and performance issues, GeneralInputAsset.GeneralControls.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_TargetingControls.enabled, "This will cause a leak and performance issues, GeneralInputAsset.TargetingControls.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_CameraControls.enabled, "This will cause a leak and performance issues, GeneralInputAsset.CameraControls.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_WeaponControls.enabled, "This will cause a leak and performance issues, GeneralInputAsset.WeaponControls.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_CoreControls.enabled, "This will cause a leak and performance issues, GeneralInputAsset.CoreControls.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_VehicleControls.enabled, "This will cause a leak and performance issues, GeneralInputAsset.VehicleControls.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // General Controls
        private readonly InputActionMap m_GeneralControls;
        private List<IGeneralControlsActions> m_GeneralControlsActionsCallbackInterfaces = new List<IGeneralControlsActions>();
        private readonly InputAction m_GeneralControls_Pause;
        private readonly InputAction m_GeneralControls_Use;
        public struct GeneralControlsActions
        {
            private @GeneralInputAsset m_Wrapper;
            public GeneralControlsActions(@GeneralInputAsset wrapper) { m_Wrapper = wrapper; }
            public InputAction @Pause => m_Wrapper.m_GeneralControls_Pause;
            public InputAction @Use => m_Wrapper.m_GeneralControls_Use;
            public InputActionMap Get() { return m_Wrapper.m_GeneralControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GeneralControlsActions set) { return set.Get(); }
            public void AddCallbacks(IGeneralControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_GeneralControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GeneralControlsActionsCallbackInterfaces.Add(instance);
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Use.started += instance.OnUse;
                @Use.performed += instance.OnUse;
                @Use.canceled += instance.OnUse;
            }

            private void UnregisterCallbacks(IGeneralControlsActions instance)
            {
                @Pause.started -= instance.OnPause;
                @Pause.performed -= instance.OnPause;
                @Pause.canceled -= instance.OnPause;
                @Use.started -= instance.OnUse;
                @Use.performed -= instance.OnUse;
                @Use.canceled -= instance.OnUse;
            }

            public void RemoveCallbacks(IGeneralControlsActions instance)
            {
                if (m_Wrapper.m_GeneralControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGeneralControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_GeneralControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GeneralControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GeneralControlsActions @GeneralControls => new GeneralControlsActions(this);

        // Targeting Controls
        private readonly InputActionMap m_TargetingControls;
        private List<ITargetingControlsActions> m_TargetingControlsActionsCallbackInterfaces = new List<ITargetingControlsActions>();
        private readonly InputAction m_TargetingControls_TargetNext;
        private readonly InputAction m_TargetingControls_TargetPrevious;
        private readonly InputAction m_TargetingControls_TargetNearest;
        private readonly InputAction m_TargetingControls_TargetFront;
        private readonly InputAction m_TargetingControls_TargetUnderCursor;
        private readonly InputAction m_TargetingControls_AutoAimToggle;
        public struct TargetingControlsActions
        {
            private @GeneralInputAsset m_Wrapper;
            public TargetingControlsActions(@GeneralInputAsset wrapper) { m_Wrapper = wrapper; }
            public InputAction @TargetNext => m_Wrapper.m_TargetingControls_TargetNext;
            public InputAction @TargetPrevious => m_Wrapper.m_TargetingControls_TargetPrevious;
            public InputAction @TargetNearest => m_Wrapper.m_TargetingControls_TargetNearest;
            public InputAction @TargetFront => m_Wrapper.m_TargetingControls_TargetFront;
            public InputAction @TargetUnderCursor => m_Wrapper.m_TargetingControls_TargetUnderCursor;
            public InputAction @AutoAimToggle => m_Wrapper.m_TargetingControls_AutoAimToggle;
            public InputActionMap Get() { return m_Wrapper.m_TargetingControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TargetingControlsActions set) { return set.Get(); }
            public void AddCallbacks(ITargetingControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_TargetingControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_TargetingControlsActionsCallbackInterfaces.Add(instance);
                @TargetNext.started += instance.OnTargetNext;
                @TargetNext.performed += instance.OnTargetNext;
                @TargetNext.canceled += instance.OnTargetNext;
                @TargetPrevious.started += instance.OnTargetPrevious;
                @TargetPrevious.performed += instance.OnTargetPrevious;
                @TargetPrevious.canceled += instance.OnTargetPrevious;
                @TargetNearest.started += instance.OnTargetNearest;
                @TargetNearest.performed += instance.OnTargetNearest;
                @TargetNearest.canceled += instance.OnTargetNearest;
                @TargetFront.started += instance.OnTargetFront;
                @TargetFront.performed += instance.OnTargetFront;
                @TargetFront.canceled += instance.OnTargetFront;
                @TargetUnderCursor.started += instance.OnTargetUnderCursor;
                @TargetUnderCursor.performed += instance.OnTargetUnderCursor;
                @TargetUnderCursor.canceled += instance.OnTargetUnderCursor;
                @AutoAimToggle.started += instance.OnAutoAimToggle;
                @AutoAimToggle.performed += instance.OnAutoAimToggle;
                @AutoAimToggle.canceled += instance.OnAutoAimToggle;
            }

            private void UnregisterCallbacks(ITargetingControlsActions instance)
            {
                @TargetNext.started -= instance.OnTargetNext;
                @TargetNext.performed -= instance.OnTargetNext;
                @TargetNext.canceled -= instance.OnTargetNext;
                @TargetPrevious.started -= instance.OnTargetPrevious;
                @TargetPrevious.performed -= instance.OnTargetPrevious;
                @TargetPrevious.canceled -= instance.OnTargetPrevious;
                @TargetNearest.started -= instance.OnTargetNearest;
                @TargetNearest.performed -= instance.OnTargetNearest;
                @TargetNearest.canceled -= instance.OnTargetNearest;
                @TargetFront.started -= instance.OnTargetFront;
                @TargetFront.performed -= instance.OnTargetFront;
                @TargetFront.canceled -= instance.OnTargetFront;
                @TargetUnderCursor.started -= instance.OnTargetUnderCursor;
                @TargetUnderCursor.performed -= instance.OnTargetUnderCursor;
                @TargetUnderCursor.canceled -= instance.OnTargetUnderCursor;
                @AutoAimToggle.started -= instance.OnAutoAimToggle;
                @AutoAimToggle.performed -= instance.OnAutoAimToggle;
                @AutoAimToggle.canceled -= instance.OnAutoAimToggle;
            }

            public void RemoveCallbacks(ITargetingControlsActions instance)
            {
                if (m_Wrapper.m_TargetingControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ITargetingControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_TargetingControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_TargetingControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public TargetingControlsActions @TargetingControls => new TargetingControlsActions(this);

        // Camera Controls
        private readonly InputActionMap m_CameraControls;
        private List<ICameraControlsActions> m_CameraControlsActionsCallbackInterfaces = new List<ICameraControlsActions>();
        private readonly InputAction m_CameraControls_NextCameraView;
        private readonly InputAction m_CameraControls_PreviousCameraView;
        private readonly InputAction m_CameraControls_Zoom;
        public struct CameraControlsActions
        {
            private @GeneralInputAsset m_Wrapper;
            public CameraControlsActions(@GeneralInputAsset wrapper) { m_Wrapper = wrapper; }
            public InputAction @NextCameraView => m_Wrapper.m_CameraControls_NextCameraView;
            public InputAction @PreviousCameraView => m_Wrapper.m_CameraControls_PreviousCameraView;
            public InputAction @Zoom => m_Wrapper.m_CameraControls_Zoom;
            public InputActionMap Get() { return m_Wrapper.m_CameraControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CameraControlsActions set) { return set.Get(); }
            public void AddCallbacks(ICameraControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Add(instance);
                @NextCameraView.started += instance.OnNextCameraView;
                @NextCameraView.performed += instance.OnNextCameraView;
                @NextCameraView.canceled += instance.OnNextCameraView;
                @PreviousCameraView.started += instance.OnPreviousCameraView;
                @PreviousCameraView.performed += instance.OnPreviousCameraView;
                @PreviousCameraView.canceled += instance.OnPreviousCameraView;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
            }

            private void UnregisterCallbacks(ICameraControlsActions instance)
            {
                @NextCameraView.started -= instance.OnNextCameraView;
                @NextCameraView.performed -= instance.OnNextCameraView;
                @NextCameraView.canceled -= instance.OnNextCameraView;
                @PreviousCameraView.started -= instance.OnPreviousCameraView;
                @PreviousCameraView.performed -= instance.OnPreviousCameraView;
                @PreviousCameraView.canceled -= instance.OnPreviousCameraView;
                @Zoom.started -= instance.OnZoom;
                @Zoom.performed -= instance.OnZoom;
                @Zoom.canceled -= instance.OnZoom;
            }

            public void RemoveCallbacks(ICameraControlsActions instance)
            {
                if (m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICameraControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_CameraControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CameraControlsActions @CameraControls => new CameraControlsActions(this);

        // Weapon Controls
        private readonly InputActionMap m_WeaponControls;
        private List<IWeaponControlsActions> m_WeaponControlsActionsCallbackInterfaces = new List<IWeaponControlsActions>();
        private readonly InputAction m_WeaponControls_FirePrimary;
        private readonly InputAction m_WeaponControls_FireSecondary;
        public struct WeaponControlsActions
        {
            private @GeneralInputAsset m_Wrapper;
            public WeaponControlsActions(@GeneralInputAsset wrapper) { m_Wrapper = wrapper; }
            public InputAction @FirePrimary => m_Wrapper.m_WeaponControls_FirePrimary;
            public InputAction @FireSecondary => m_Wrapper.m_WeaponControls_FireSecondary;
            public InputActionMap Get() { return m_Wrapper.m_WeaponControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(WeaponControlsActions set) { return set.Get(); }
            public void AddCallbacks(IWeaponControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_WeaponControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_WeaponControlsActionsCallbackInterfaces.Add(instance);
                @FirePrimary.started += instance.OnFirePrimary;
                @FirePrimary.performed += instance.OnFirePrimary;
                @FirePrimary.canceled += instance.OnFirePrimary;
                @FireSecondary.started += instance.OnFireSecondary;
                @FireSecondary.performed += instance.OnFireSecondary;
                @FireSecondary.canceled += instance.OnFireSecondary;
            }

            private void UnregisterCallbacks(IWeaponControlsActions instance)
            {
                @FirePrimary.started -= instance.OnFirePrimary;
                @FirePrimary.performed -= instance.OnFirePrimary;
                @FirePrimary.canceled -= instance.OnFirePrimary;
                @FireSecondary.started -= instance.OnFireSecondary;
                @FireSecondary.performed -= instance.OnFireSecondary;
                @FireSecondary.canceled -= instance.OnFireSecondary;
            }

            public void RemoveCallbacks(IWeaponControlsActions instance)
            {
                if (m_Wrapper.m_WeaponControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IWeaponControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_WeaponControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_WeaponControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public WeaponControlsActions @WeaponControls => new WeaponControlsActions(this);

        // Core Controls
        private readonly InputActionMap m_CoreControls;
        private List<ICoreControlsActions> m_CoreControlsActionsCallbackInterfaces = new List<ICoreControlsActions>();
        private readonly InputAction m_CoreControls_MousePosition;
        private readonly InputAction m_CoreControls_MoveCursor;
        private readonly InputAction m_CoreControls_Back;
        public struct CoreControlsActions
        {
            private @GeneralInputAsset m_Wrapper;
            public CoreControlsActions(@GeneralInputAsset wrapper) { m_Wrapper = wrapper; }
            public InputAction @MousePosition => m_Wrapper.m_CoreControls_MousePosition;
            public InputAction @MoveCursor => m_Wrapper.m_CoreControls_MoveCursor;
            public InputAction @Back => m_Wrapper.m_CoreControls_Back;
            public InputActionMap Get() { return m_Wrapper.m_CoreControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CoreControlsActions set) { return set.Get(); }
            public void AddCallbacks(ICoreControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_CoreControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CoreControlsActionsCallbackInterfaces.Add(instance);
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
                @MoveCursor.started += instance.OnMoveCursor;
                @MoveCursor.performed += instance.OnMoveCursor;
                @MoveCursor.canceled += instance.OnMoveCursor;
                @Back.started += instance.OnBack;
                @Back.performed += instance.OnBack;
                @Back.canceled += instance.OnBack;
            }

            private void UnregisterCallbacks(ICoreControlsActions instance)
            {
                @MousePosition.started -= instance.OnMousePosition;
                @MousePosition.performed -= instance.OnMousePosition;
                @MousePosition.canceled -= instance.OnMousePosition;
                @MoveCursor.started -= instance.OnMoveCursor;
                @MoveCursor.performed -= instance.OnMoveCursor;
                @MoveCursor.canceled -= instance.OnMoveCursor;
                @Back.started -= instance.OnBack;
                @Back.performed -= instance.OnBack;
                @Back.canceled -= instance.OnBack;
            }

            public void RemoveCallbacks(ICoreControlsActions instance)
            {
                if (m_Wrapper.m_CoreControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICoreControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_CoreControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CoreControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CoreControlsActions @CoreControls => new CoreControlsActions(this);

        // Vehicle Controls
        private readonly InputActionMap m_VehicleControls;
        private List<IVehicleControlsActions> m_VehicleControlsActionsCallbackInterfaces = new List<IVehicleControlsActions>();
        private readonly InputAction m_VehicleControls_FreeLookMode;
        private readonly InputAction m_VehicleControls_FreeLook;
        public struct VehicleControlsActions
        {
            private @GeneralInputAsset m_Wrapper;
            public VehicleControlsActions(@GeneralInputAsset wrapper) { m_Wrapper = wrapper; }
            public InputAction @FreeLookMode => m_Wrapper.m_VehicleControls_FreeLookMode;
            public InputAction @FreeLook => m_Wrapper.m_VehicleControls_FreeLook;
            public InputActionMap Get() { return m_Wrapper.m_VehicleControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(VehicleControlsActions set) { return set.Get(); }
            public void AddCallbacks(IVehicleControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_VehicleControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_VehicleControlsActionsCallbackInterfaces.Add(instance);
                @FreeLookMode.started += instance.OnFreeLookMode;
                @FreeLookMode.performed += instance.OnFreeLookMode;
                @FreeLookMode.canceled += instance.OnFreeLookMode;
                @FreeLook.started += instance.OnFreeLook;
                @FreeLook.performed += instance.OnFreeLook;
                @FreeLook.canceled += instance.OnFreeLook;
            }

            private void UnregisterCallbacks(IVehicleControlsActions instance)
            {
                @FreeLookMode.started -= instance.OnFreeLookMode;
                @FreeLookMode.performed -= instance.OnFreeLookMode;
                @FreeLookMode.canceled -= instance.OnFreeLookMode;
                @FreeLook.started -= instance.OnFreeLook;
                @FreeLook.performed -= instance.OnFreeLook;
                @FreeLook.canceled -= instance.OnFreeLook;
            }

            public void RemoveCallbacks(IVehicleControlsActions instance)
            {
                if (m_Wrapper.m_VehicleControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IVehicleControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_VehicleControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_VehicleControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public VehicleControlsActions @VehicleControls => new VehicleControlsActions(this);
        private int m_MouseKeyboardSchemeIndex = -1;
        public InputControlScheme MouseKeyboardScheme
        {
            get
            {
                if (m_MouseKeyboardSchemeIndex == -1) m_MouseKeyboardSchemeIndex = asset.FindControlSchemeIndex("MouseKeyboard");
                return asset.controlSchemes[m_MouseKeyboardSchemeIndex];
            }
        }
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        public interface IGeneralControlsActions
        {
            void OnPause(InputAction.CallbackContext context);
            void OnUse(InputAction.CallbackContext context);
        }
        public interface ITargetingControlsActions
        {
            void OnTargetNext(InputAction.CallbackContext context);
            void OnTargetPrevious(InputAction.CallbackContext context);
            void OnTargetNearest(InputAction.CallbackContext context);
            void OnTargetFront(InputAction.CallbackContext context);
            void OnTargetUnderCursor(InputAction.CallbackContext context);
            void OnAutoAimToggle(InputAction.CallbackContext context);
        }
        public interface ICameraControlsActions
        {
            void OnNextCameraView(InputAction.CallbackContext context);
            void OnPreviousCameraView(InputAction.CallbackContext context);
            void OnZoom(InputAction.CallbackContext context);
        }
        public interface IWeaponControlsActions
        {
            void OnFirePrimary(InputAction.CallbackContext context);
            void OnFireSecondary(InputAction.CallbackContext context);
        }
        public interface ICoreControlsActions
        {
            void OnMousePosition(InputAction.CallbackContext context);
            void OnMoveCursor(InputAction.CallbackContext context);
            void OnBack(InputAction.CallbackContext context);
        }
        public interface IVehicleControlsActions
        {
            void OnFreeLookMode(InputAction.CallbackContext context);
            void OnFreeLook(InputAction.CallbackContext context);
        }
    }
}
